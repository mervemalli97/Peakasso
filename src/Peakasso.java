/* Generated By:JavaCC: Do not edit this line. Peakasso.java */
public class Peakasso implements PeakassoConstants {
        public static void main(String args []) throws ParseException
        {
                JavaCCParser parser;
        parser = new JavaCCParser(new java.io.FileInputStream("input.txt"));
        try {
                        char[][] canvas;
                        String program_id;
                        int canvasX, canvasY, cursorX, cursorY;
                        String[] brush_names;
                        int[] brush_x;
                        int[] brush_y;
                        int brush_count = 0;
                parser.peakasso();
        System.out.println("JavaCC Parser:  Java program parsed successfully.");
        } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("JavaCC Parser:  Encountered errors during parse.");
        }
        }
        static int getbrush(String name) {
                for (int i = 0; i < brush_names.length(); i++) {
                        if ((brush_names[i]).equals(name))
                                return i;
                }
                return -1;
        }
        static void paintcanvas(String name){
                int b = getbrush(name);
                for (int i = 0; i < brush_x[b]; i++) {
                        for (int j = 0; j < brush_y[b]; j++) {
                                canvas[cursorX+i][cursorY+j] = '*';
                        }
                }
        }

  static final public void peakasso() throws ParseException {
        String ths;
    jj_consume_token(15);
    ths = jj_consume_token(ID);
                       ths = program_id;
    jj_consume_token(16);
    if (jj_2_1(3)) {
      canvas_init();
    } else if (jj_2_2(3)) {
      brush_decleration();
    } else if (jj_2_3(3)) {
      drawing();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void canvas_init() throws ParseException {
    jj_consume_token(17);
    jj_consume_token(18);
    canvas_size_init();
    cursor_pos_init();
  }

  static final public void canvas_size_init(int canvasX, int canvasY, char[][] canvas) throws ParseException {
  int x,y;
    jj_consume_token(19);
    jj_consume_token(20);
    jj_consume_token(21);
    x = jj_consume_token(int_lit);
                          canvasX = x;
    jj_consume_token(16);
    jj_consume_token(22);
    jj_consume_token(21);
    y = jj_consume_token(int_lit);
                          canvasY = y;
    jj_consume_token(16);
                canvas = new char[canvasX][canvasY];
                for(int i = 0; i < canvasX; i++) {
                        for (int j = 0; j < canvasY; j++) {
                                canvas[i][j] = ' ';
                        }
                }
  }

  static final public void cursor_pos_init() throws ParseException {
  int x,y;
    jj_consume_token(23);
    jj_consume_token(21);
    x = jj_consume_token(int_lit);
                          cursorX = x;
    jj_consume_token(16);
    jj_consume_token(24);
    jj_consume_token(21);
    y = jj_consume_token(int_lit);
                          cursorY = y;
    jj_consume_token(16);
  }

  static final public void brush_decleration() throws ParseException {
    jj_consume_token(25);
    jj_consume_token(18);
    variable_def();
  }

  static final public void variable_def() throws ParseException {
    jj_consume_token(26);
    jj_consume_token(18);
    brush_list();
  }

  static final public void brush_list() throws ParseException {
    if (jj_2_4(3)) {
      brush_name();
    } else if (jj_2_5(3)) {
      brush_name();
      jj_consume_token(27);
      brush_list();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void brush_name() throws ParseException {
        String name;
        int x,y;
    if (jj_2_7(3)) {
      name = jj_consume_token(ID);
                        brush_names[brush_count] = name; brush_x[brush_count] = 1; brush_y[brush_count] = 1; brush_count++;
    } else if (jj_2_8(3)) {
      name = jj_consume_token(ID);
      if (jj_2_6(3)) {
        jj_consume_token(21);
        x = jj_consume_token(int_lit);
        y = jj_consume_token(int_lit);
      } else {
        ;
      }
          brush_names[brush_count] = name; brush_x[brush_count] = 1; brush_y[brush_count] = 1; brush_count++;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void drawing() throws ParseException {
    jj_consume_token(28);
    jj_consume_token(18);
    if (jj_2_9(3)) {
      renew_stmt();
    } else if (jj_2_10(3)) {
      paint_stmt();
    } else if (jj_2_11(3)) {
      exhibit_stmt();
    } else if (jj_2_12(3)) {
      cursor_move_stmt();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void renew_stmt() throws ParseException {
        String name;
        int x,y;
    jj_consume_token(29);
    jj_consume_token(18);
    jj_consume_token(30);
    jj_consume_token(message);
    jj_consume_token(30);
    name = jj_consume_token(ID);
    x = jj_consume_token(int_lit);
                          brush_x[getbrush(name)] = x;
    y = jj_consume_token(int_lit);
                          brush_y[getbrush(name)] = y;
    jj_consume_token(16);
  }

  static final public void paint_stmt() throws ParseException {
  String name;
    jj_consume_token(31);
    name = jj_consume_token(ID);
                        paintcanvas(name);
    jj_consume_token(16);
  }

  static final public void exhibit_stmt() throws ParseException {
    jj_consume_token(32);
    jj_consume_token(16);
                               System.out.println(canvas);
  }

  static final public void cursor_move_stmt() throws ParseException {
        char xy;
        int n;
    jj_consume_token(33);
    xy = cursor();
    jj_consume_token(34);
    n = expression();
                           if (xy == x) cursorX = n; else cursorY = n;
  }

  static final public char cursor() throws ParseException {
    if (jj_2_13(3)) {
      jj_consume_token(23);
                    {if (true) return 'x';}
    } else if (jj_2_14(3)) {
      jj_consume_token(24);
                          {if (true) return 'y';}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int expression() throws ParseException {
  int r;
    r = term();
    label_1:
    while (true) {
      if (jj_2_15(3)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_16(3)) {
        jj_consume_token(PLUS);
      } else if (jj_2_17(3)) {
        jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
    }
                                                      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public int term() throws ParseException {
  int r;
  char xy;
    if (jj_2_18(3)) {
      jj_consume_token(35);
      r = expression();
                                  {if (true) return r;}
      jj_consume_token(36);
    } else if (jj_2_19(3)) {
      xy = cursor();
                          if(xy == 'x') {if (true) return cursorX;} else {if (true) return cursorY;}
    } else if (jj_2_20(3)) {
      r = jj_consume_token(int_lit);
                          {if (true) return r;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_3_11() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(32)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(int_lit)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(31)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(28)) return true;
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(21)) return true;
    if (jj_scan_token(int_lit)) return true;
    if (jj_scan_token(int_lit)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(27)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PeakassoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[20];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Peakasso(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Peakasso(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PeakassoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Peakasso(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PeakassoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Peakasso(PeakassoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PeakassoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
